# common-bird.conf

log syslog all;

# debug protocols all;

define 'as-isp-f' = 64512;      # AS number for the ISP with the 'f' network
define 'as-isp-e' = 64513;      # AS number for the ISP with the 'e' network



# Removing quotation & modifying marks to avoid syntax errors:

define ispF = 64512;	  # AS number for the ISP with the 'f' network
define ispE = 64513;      # AS number for the ISP with the 'e' network



# Table definitions now specify the network type.
# So I'm adding ipV6 to import/export commands.
# All import/export commands need to be inside the network type
# or else, we get a Multiple ipv6 channels error.

protocol kernel {
	ipv6 {
	    import all;
	    export all;     # Default is export none   	
	};
	learn;              # Learn all alien routes from the kernel
	scan time 20;       # Scan kernel routing table every 20 seconds
}


protocol device {
	scan time 10;       # Scan interfaces every 10 seconds
}


# Filters are interpreted by BIRD core when a route is being passed 
# between protocols and routing tables. 
# Filter gets the route, looks at its attributes and decides whether to pass (accept)
# the changed route or reject it.
# In this filter, we check if the address actually belongs to the ISP F network or not.
# If yes, we accept.


# A1-A4 are customers of ISP F
# We're adding all the addresses for A1-A4 here.
# Return Syntax: https://dn42.net/howto/Bird

filter customer_A_filter {
       print ispF;
       if (net ~ [2001:638:709:a1::/64, 
		  2001:638:709:a2::/64, 
		  2001:638:709:a3::/64, 
		  2001:638:709:a4::/64]) then 
		accept;
       else {
       		reject;
       }
};


# B1-B4 are customers of ISP E
# We're adding all the addresses for B1-B4 here.

filter customer_B_filter {
       print ispE;
       if (net ~ [2001:638:709:b1::/64, 
		  2001:638:709:b2::/64, 
		  2001:638:709:b3::/64, 
		  2001:638:709:b4::/64]) then 
		accept;
       else {
       		reject;
       }
}


# Here we are defining a routing policy for part e
# by penalizing routes from a particular client 

filter penalize_A_filter {
       if (net ~ [2001:638:709:a1::/64, 
		  2001:638:709:a2::/64, 
		  2001:638:709:a3::/64, 
		  2001:638:709:a4::/64]) then {
	  
	  print ispF;
          bgp_path.prepend(ispF);
          bgp_path.prepend(ispF);
          bgp_path.prepend(ispF);
          accept;
       }
       else {
		reject;
       }
}

filter penalize_B_filter {
       if (net ~ [2001:638:709:b1::/64, 
		  2001:638:709:b2::/64, 
		  2001:638:709:b3::/64, 
		  2001:638:709:b4::/64]) then {
	  print ispE;
          bgp_path.prepend(ispE);
          bgp_path.prepend(ispE);
          bgp_path.prepend(ispE);
          accept;
       }
       else {
       		reject;
	}
}




# References: 
# https://bird.network.cz/get_doc&v=16&f=bird-5.html&fbclid=IwAR3VIsZLHredLYs50Ot2bYk4JOKi5i4HBwOqgPdlW6oZSUAuTJxu_-opRFQ
# https://dn42.net/howto/Bird
# # https://gitlab.labs.nic.cz/labs/bird/-/wikis/transition-notes-to-bird-2
# https://gitlab.labs.nic.cz/labs/bird/-/wikis/Policy_routing

